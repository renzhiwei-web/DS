package com.DS.bTree;
/**
 * 2-3树是最简单的B树结构
 * 2-3树的所有叶子节点都在同一层（只要是B树都满足这个条件）
 * 有两个子节点的节点叫二节点，二节点要么没有子节点，要么有两个子节点
 * 有三个子节点的节点叫三节点，三节点要么没有自己点，要么有三个子节点
 * 2-3是由二节点和三节点构成的树
 * 按照规则插入一个数到某个节点时，不能满足上面三个需求时，就需要拆，先向上拆，如果上层满，则拆本层，拆后仍然需要满足上面的3
 * 个条件
 * 对于三节点的子树的值大小仍然遵守二叉排序树的规则
 * B树的阶就是B树中子节点最多的节点数
 * B树的搜索，从根节点开始，对节点内的关键字序列进行二分查找，如果命中则结束，否则进入查询关键字所属范围的儿子节点；重复，直
 * 至所对应的子节点指针为空，或已经是叶子节点
 * 关键字集合分布在整棵树中，即叶子节点和非叶子节点都存放数据
 * 搜索有可能在非叶子节点结束
 * 其搜索性能等价在关键字全集中左二分查找
 * 
 * 
 * B+树是B树的变体，也是一种多路搜索树
 * B+树的说明：
 * 1.B+树的搜索与B树相同，区别是B+树只有达到叶子节点时才命中，
 * 2.所有关键字都出现在叶子节点的链表中，且链表中的关键字恰好是有序的
 * 3.非叶子节点相当于是叶子节点的索引，叶子节点相当于是存储数据的数据层
 * 4.更适合文件索引系统
 * 5.B树和B+树各有自己的应用场景，不能说B+树完全比B树好
 */
public class BTree {

}
